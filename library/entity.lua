---@meta

-- cspell:ignore sunrisebg

---@class HudID

-- Functions receive a "luaentity" table as `self`:
--
-- * It has the member `name`, which is the registered name `("mod:thing")`
-- * It has the member `object`, which is an `ObjectRef` pointing to the object
-- * The original prototype is visible directly via a metatable
---@class luaentity: table
---@field name string
---@field object ObjectRef
---@field on_activate fun(self, staticdata:string, dtime_s:number)
-- * `on_deactivate(self, removal)`
--     * Called when the object is about to get removed or unloaded.
--     * `removal`: boolean indicating whether the object is about to get removed.
--       Calling `object:remove()` on an active object will call this with `removal=true`.
--       The mapblock the entity resides in being unloaded will call this with `removal=false`.
--     * Note that this won't be called if the object hasn't been activated in the first place.
--       In particular, `core.clear_objects({mode = "full"})` won't call this,
--       whereas `core.clear_objects({mode = "quick"})` might call this.
---@field on_deactivate fun(self, removal:boolean)
---@field on_step fun(self, dtime: number, moveresult: moveresult)
---@field on_punch fun(self, puncher:ObjectRef?, time_from_last_punch:number?, tool_capabilities:tool_capabilities?, dir: vector, damage: number):boolean
---@field on_death fun(self, killer:ObjectRef?)
---@field on_rightclick fun(self, clicker:ObjectRef)
---@field on_attach_child fun(self, child:ObjectRef)
---@field on_detach_child fun(self, child:ObjectRef)
---@field on_detach fun(self, parent:ObjectRef)
---@field get_staticdata fun(self):string

--- Unofficial note: Never mentioned anywhere but useful for me
---@class collision
---@field type "node"|"object"
---@field axis "x"|"y"|"z"
---@field node_pos vector?
---@field object ObjectRef?
---@field new_pos vector
---@field old_velocity vector
---@field new_velocity vector

---@class moveresult
---@field touching_ground boolean
---@field collides boolean
---@field standing_on_object boolean
---@field collisions collision[]

---@class ObjectProps
-- Defines the maximum and default HP of the object.
-- For Lua entities, the maximum is not enforced.
-- For players, this defaults to `core.PLAYER_MAX_HP_DEFAULT` (20).
-- For Lua entities, the default is 10.
---@field hp_max? integer
-- For players only. Defines the maximum amount of "breath" for the player.
-- Defaults to `core.PLAYER_MAX_BREATH_DEFAULT` (10).
---@field breath_max? integer
-- For players only. Zoom FOV in degrees.
-- Note that zoom loads and/or generates world beyond the server's
-- maximum send and generate distances, so acts like a telescope.
-- Smaller zoom_fov values increase the distance loaded/generated.
-- Defaults to 15 in creative mode, 0 in survival mode.
-- zoom_fov = 0 disables zooming for the player.
---@field zoom_fov? number
-- For players only. Camera height above feet position in nodes.
---@field eye_height? number
-- Collide with `walkable` nodes.
---@field physical? boolean
-- Collide with other objects if physical = true
---@field collide_with_objects? boolean
-- { xmin, ymin, zmin, xmax, ymax, zmax } in nodes from object position.
-- Collision boxes cannot rotate, setting `rotate = true` on it has no effect.
-- If not set, the selection box copies the collision box, and will also not rotate.
-- If `rotate = false`, the selection box will not rotate with the object itself, remaining fixed to the axes.
---@field selectionbox? number[]
-- If `rotate = true`, it will match the object's rotation and any attachment rotations.
-- Raycasts use the selection box and object's rotation, but do *not* obey attachment rotations.
-- For server-side raycasts to work correctly,
-- the selection box should extend at most 5 units in each direction.
---@field collisionbox? table
-- Can be `true` if it is pointable, `false` if it can be pointed through,
-- or `"blocking"` if it is pointable but not selectable.
-- Clients older than 5.9.0 interpret `pointable = "blocking"` as `pointable = true`.
-- Can be overridden by the `pointabilities` of the held item.
---@field pointable? boolean
-- "cube" is a node-sized cube.
-- "sprite" is a flat texture always facing the player.
-- "upright_sprite" is a vertical flat texture.
-- "mesh" uses the defined mesh model.
-- "wielditem" is used for dropped items.
--   (see builtin/game/item_entity.lua).
--   For this use 'wield_item = itemname'.
--   Setting 'textures = {itemname}' has the same effect, but is deprecated.
--   If the item has a 'wield_image' the object will be an extrusion of
--   that, otherwise:
--   If 'itemname' is a cubic node or nodebox the object will appear
--   identical to 'itemname'.
--   If 'itemname' is a plantlike node the object will be an extrusion
--   of its texture.
--   Otherwise for non-node items, the object will be an extrusion of
--   'inventory_image'.
--   If 'itemname' contains a ColorString or palette index (e.g. from
--   `core.itemstring_with_palette()`), the entity will inherit the color.
--   Wielditems are scaled a bit. If you want a wielditem to appear
--   to be as large as a node, use `0.667` in `visual_size`
-- "item" is similar to "wielditem" but ignores the 'wield_image' parameter.
-- "node" looks exactly like a node in-world (supported since 5.12.0)
--   Note that visual effects like waving or liquid reflections will not work.
---@field visual? "cube"|"sprite"|"upright_sprite"|"mesh"|"wielditem"|"item"|"node"
-- Multipliers for the visual size. If `z` is not specified, `x` will be used
-- to scale the entity along both horizontal axes.
---@field visual_size? vector
-- File name of mesh when using "mesh" visual.
-- For legacy reasons, this uses a 10x scale for meshes: 10 units = 1 node.
---@field mesh? string
-- Number of required textures depends on visual:
-- "cube" uses 6 textures just like a node, but all 6 must be defined.
-- "sprite" uses 1 texture.
-- "upright_sprite" uses 2 textures: {front, back}.
-- "mesh" requires one texture for each mesh buffer/material (in order)
-- Deprecated usage of "wielditem" expects 'textures = {itemname}' (see 'visual' above).
-- Unofficial note: I *guessed* that it's string[] but i am not sure
---@field textures? string[]
-- Currently unused.
---@field colors? table
-- Node to show when using the "node" visual
---@field node? MapNodeOpt
-- Use texture's alpha channel for transparency blending.
-- Note: currently causes visual issues when viewed through other
-- semi-transparent materials such as water.
-- Note: ignored for "item", "wielditem" and "node" visual.
---@field use_texture_alpha? boolean
-- Used with spritesheet textures for animation and/or frame selection
-- according to position relative to player.
-- Defines the number of columns and rows in the spritesheet:
-- {columns, rows}.
---@field spritediv? {x:number,y:number}
-- Used with spritesheet textures.
-- Defines the {column, row} position of the initially used frame in the
-- spritesheet.
---@field initial_sprite_basepos? {x:number,y:number}
-- If false, object is invisible and can't be pointed.
---@field is_visible? boolean
-- If true, object is able to make footstep sounds of nodes
-- (see node sound definition for details).
---@field makes_footstep_sound? boolean
-- Set constant rotation in radians per second, positive or negative.
-- Object rotates along the local Y-axis, and works with set_rotation.
-- Set to 0 to disable constant rotation.
---@field automatic_rotate? number
-- If positive number, object will climb upwards when it moves
-- horizontally against a `walkable` node, if the height difference
-- is within `stepheight`.
---@field stepheight? number
-- Automatically set yaw to movement direction, offset in degrees.
-- 'false' to disable.
---@field automatic_face_movement_dir? number|boolean
-- Limit automatic rotation to this value in degrees per second.
-- No limit if value <= 0.
---@field automatic_face_movement_max_rotation_per_sec? number
-- Set to false to disable backface_culling for model
-- Note: only used by "mesh" and "cube" visual
---@field backface_culling? boolean
-- Add this much extra lighting when calculating texture color.
-- Value < 0 disables light's effect on texture color.
-- For faking self-lighting, UI style entities, or programmatic coloring
-- in mods.
---@field glow? number
-- The name to display on the head of the object. By default empty.
-- If the object is a player, a nil or empty nametag is replaced by the player's name.
-- For all other objects, a nil or empty string removes the nametag.
-- To hide a nametag, set its color alpha to zero. That will disable it entirely.
---@field nametag? string
-- Sets text color of nametag
---@field nametag_color? ColorSpec
-- Sets background color of nametag
-- `false` will cause the background to be set automatically based on user settings.
-- Default: false
---@field nametag_bgcolor? ColorSpec
-- Same as infotext for nodes. Empty by default
---@field infotext? string
-- If false, never save this object statically. It will simply be
-- deleted when the block gets unloaded.
-- The get_staticdata() callback is never called then.
-- Defaults to 'true'.
---@field static_save? boolean
-- Texture modifier to be applied for a short duration when object is hit
---@field damage_texture_modifier? string
-- Setting this to 'false' disables diffuse lighting of entity
-- Note: ignored for "item", "wielditem" and "node" visual
---@field shaded? boolean
-- Defaults to true for players, false for other entities.
-- If set to true the entity will show as a marker on the minimap.
---@field show_on_minimap? boolean

-- `ObjectRef`
-- -----------
--
-- Moving things in the game are generally these.
-- This is basically a reference to a C++ `ServerActiveObject`.
--
-- ### Advice on handling `ObjectRefs`
--
-- When you receive an `ObjectRef` as a callback argument or from another API
-- function, it is possible to store the reference somewhere and keep it around.
-- It will keep functioning until the object is unloaded or removed.
--
-- However, doing this is **NOT** recommended - `ObjectRefs` should be "let go"
-- of as soon as control is returned from Lua back to the engine.
--
-- Doing so is much less error-prone and you will never need to wonder if the
-- object you are working with still exists.
--
-- If this is not feasible, you can test whether an `ObjectRef` is still valid
-- via `object:is_valid()`.
--
-- Getters may be called for invalid objects and will return nothing then.
-- All other methods should not be called on invalid objects.
--
-- ### Attachments
--
-- It is possible to attach objects to other objects (`set_attach` method).
--
-- When an object is attached, it is positioned relative to the parent's position
-- and rotation. `get_pos` and `get_rotation` will always return the parent's
-- values and changes via their setter counterparts are ignored.
--
-- To change position or rotation call `set_attach` again with the new values.
--
-- **Note**: Just like model dimensions, the relative position in `set_attach`
-- must be multiplied by 10 compared to world positions.
--
-- It is also possible to attach to a bone of the parent object. In that case the
-- child will follow movement and rotation of that bone.
--
---@class ObjectRef
-- * `is_valid()`: returns whether the object is valid.
--    * See "Advice on handling `ObjectRefs`" above.
---@field is_valid fun(self,):boolean
-- * `get_pos()`: returns position as vector `{x=num, y=num, z=num}`
---@field get_pos fun(self,):vector
-- * `set_pos(pos)`:
--     * Sets the position of the object.
--     * No-op if object is attached.
--     * `pos` is a vector `{x=num, y=num, z=num}`
---@field set_pos fun(self,pos:vector)
-- * `add_pos(pos)`:
--     * Changes position by adding to the current position.
--     * No-op if object is attached.
--     * `pos` is a vector `{x=num, y=num, z=num}`.
--     * In comparison to using `set_pos`, `add_pos` will avoid synchronization problems.
---@field add_pos fun(self,pos:vector)
-- * `get_velocity()`: returns the velocity, a vector.
---@field get_velocity fun(self,):vector
-- * `add_velocity(vel)`
--     * Changes velocity by adding to the current velocity.
--     * `vel` is a vector, e.g. `{x=0.0, y=2.3, z=1.0}`
--     * In comparison to using `get_velocity`, adding the velocity and then using
--       `set_velocity`, `add_velocity` is supposed to avoid synchronization problems.
--       Additionally, players also do not support `set_velocity`.
--     * If object is a player:
--         * Does not apply during `free_move`.
--         * Note that since the player speed is normalized at each move step,
--           increasing e.g. Y velocity beyond what would usually be achieved
--           (see: physics overrides) will cause existing X/Z velocity to be reduced.
--         * Example: `add_velocity({x=0, y=6.5, z=0})` is equivalent to
--           pressing the jump key (assuming default settings)
---@field add_velocity fun(self,vel:vector)
-- * `move_to(pos, continuous=false)`
--     * Does an interpolated move for Lua entities for visually smooth transitions.
--     * If `continuous` is true, the Lua entity will not be moved to the current
--       position before starting the interpolated move.
--     * For players this does the same as `set_pos`,`continuous` is ignored.
--     * no-op if object is attached
---@field move_to fun(self,pos:vector, continuous:boolean?)
-- * `punch(puncher, time_from_last_punch, tool_capabilities, dir)`
--     * punches the object, triggering all consequences a normal punch would have
--     * `puncher`: another `ObjectRef` which punched the object or `nil`
--     * `dir`: direction vector of punch
--     * Other arguments: See `on_punch` for entities
--     * Arguments `time_from_last_punch`, `tool_capabilities`, and `dir`
--       will be replaced with a default value when the caller sets them to `nil`.
---@field punch fun(self,puncher: ObjectRef, time_from_last_punch: number?, tool_capabilities:tool_capabilities?, dir:vector?)
-- * `right_click(clicker)`:
--     * simulates using the 'place/use' key on the object
--     * triggers all consequences as if a real player had done this
--     * `clicker` is another `ObjectRef` which has clicked
--     * note: this is called `right_click` for historical reasons only
---@field right_click fun(self,clicker:PlayerRef)
-- * `get_hp()`: returns number of health points
---@field get_hp fun(self,):number
-- * `set_hp(hp, reason)`: set number of health points
--     * See reason in register_on_player_hpchange
--     * Is limited to the range of 0 ... 65535 (2^16 - 1)
--     * For players: HP are also limited by `hp_max` specified in object properties
--- Unofficial note:I *assume* it's a PlayerHPChangeReason, i am not certain
---@field set_hp fun(self,hp:integer, reason:PlayerHPChangeReason)
-- * `get_inventory()`: returns an `InvRef` for players, otherwise returns `nil`
---@field get_inventory fun(self,):InvRef
-- * `get_wield_list()`: returns the name of the inventory list the wielded item
--    is in.
---@field get_wield_list fun(self,):string
-- * `get_wield_index()`: returns the wield list index of the wielded item (starting with 1)
---@field get_wield_index fun(self,):integer
-- * `get_wielded_item()`: returns a copy of the wielded item as an `ItemStack`
---@field get_wielded_item fun(self,):ItemStack
-- * `set_wielded_item(item)`: replaces the wielded item, returns `true` if
--   successful.
---@field set_wielded_item fun(self,item:ItemStack):boolean
-- * `get_armor_groups()`:
--     * returns a table with all of the object's armor group ratings
--     * syntax: the table keys are the armor group names,
--       the table values are the corresponding group ratings
--     * see section '`ObjectRef` armor groups' for details
---@field get_armor_groups fun(self,):table<string, integer>
-- * `set_armor_groups({group1=rating, group2=rating, ...})`
--     * sets the object's full list of armor groups
--     * same table syntax as for `get_armor_groups`
--     * note: all armor groups not in the table will be removed
---@field set_armor_groups fun(self,groups: table<string,integer>)
-- * `set_animation(frame_range, frame_speed, frame_blend, frame_loop)`
--     * Sets the object animation parameters and (re)starts the animation
--     * Animations only work with a `"mesh"` visual
--     * `frame_range`: Beginning and end frame (as specified in the mesh file).
--        * Syntax: `{x=start_frame, y=end_frame}`
--        * Animation interpolates towards the end frame but stops when it is reached
--        * If looped, there is no interpolation back to the start frame
--        * If looped, the model should look identical at start and end
--        * default: `{x=1.0, y=1.0}`
--     * `frame_speed`: How fast the animation plays, in frames per second (number)
--        * default: `15.0`
--     * `frame_blend`: number, default: `0.0`
--     * `frame_loop`: If `true`, animation will loop. If false, it will play once
--        * default: `true`
---@field set_animation fun(self,frame_range: {x:number,y:number}?, frame_speed:number?, frame_blend:number?, frame_loop:boolean?)
-- * `get_animation()`: returns current animation parameters set by `set_animation`:
--     * `frame_range`, `frame_speed`, `frame_blend`, `frame_loop`.
---@field get_animation fun(self,):{x:number,y:number}, number, number, boolean
-- * `set_animation_frame_speed(frame_speed)`
--     * Sets the frame speed of the object's animation
--     * Unlike `set_animation`, this will not restart the animation
--     * `frame_speed`: See `set_animation`
---@field set_animation_frame_speed fun(self,frame_speed: number)
-- * `set_attach(parent[, bone, position, rotation, forced_visible])`
--     * Attaches object to `parent`
--     * See 'Attachments' section for details
--     * `parent`: `ObjectRef` to attach to
--     * `bone`: Bone to attach to. Default is `""` (the root bone)
--     * `position`: relative position, default `{x=0, y=0, z=0}`
--     * `rotation`: relative rotation in degrees, default `{x=0, y=0, z=0}`
--     * `forced_visible`: Boolean to control whether the attached entity
--        should appear in first person, default `false`.
--     * This command may fail silently (do nothing) when it would result
--       in circular attachments.
---@field set_attach fun(self,parent:ObjectRef, bone:string?, position:vector?, rotation:vector?, forced_visible:boolean?)
-- * `get_attach()`:
--     * returns current attachment parameters or nil if it isn't attached
--     * If attached, returns `parent`, `bone`, `position`, `rotation`, `forced_visible`
---@field get_attach fun(self,):ObjectRef?, string?, vector?, vector?, boolean?
-- * `get_children()`: returns a list of ObjectRefs that are attached to the
--     object.
---@field get_children fun(self,): ObjectRef[]
-- * `set_detach()`: Detaches object. No-op if object was not attached.
---@field set_detach fun(self,)
-- * `set_bone_position([bone, position, rotation])`
--     * Sets absolute bone overrides, e.g. it is equivalent to
--       ```lua
--       obj:set_bone_override(bone, {
--           position = {vec = position, absolute = true},
--           rotation = {vec = rotation:apply(math.rad), absolute = true}
--       })
--       ```
--     * **Note:** Rotation is in degrees, not radians.
--     * **Deprecated:** Use `set_bone_override` instead.
---@deprecated
---@field set_bone_position fun(self,bone: string, position:any, rotation:any)
-- * `get_bone_position(bone)`: returns the previously set position and rotation of the bone
--     * Shorthand for `get_bone_override(bone).position.vec, get_bone_override(bone).rotation.vec:apply(math.deg)`.
--     * **Note:** Returned rotation is in degrees, not radians.
--     * **Deprecated:** Use `get_bone_override` instead.
---@field get_bone_position fun(self,bone:string): vector
-- * `set_bone_override(bone, override)`
--     * `bone`: string
--     * `override`: `{ position = property, rotation = property, scale = property }` or `nil`
--     * `override = nil` (including omission) is shorthand for `override = {}` which clears the override
--     * Each `property` is a table of the form
--       `{ vec = vector, interpolation = 0, absolute = false }` or `nil`
--         * `vec` is in the same coordinate system as the model, and in radians for rotation.
--           It defaults to `vector.zero()` for translation and rotation and `vector.new(1, 1, 1)` for scale.
--         * `interpolation`: The old and new overrides are interpolated over this timeframe (in seconds).
--         * `absolute`: If set to `false` (which is the default),
--           the override will be relative to the animated property:
--             * Translation in the case of `position`;
--             * Composition in the case of `rotation`;
--             * Per-axis multiplication in the case of `scale`
--     * `property = nil` is equivalent to no override on that property
--     * **Note:** Unlike `set_bone_position`, the rotation is in radians, not degrees.
--     * Compatibility note: Clients prior to 5.9.0 only support absolute position and rotation.
--       All values are treated as absolute and are set immediately (no interpolation).
---@field set_bone_override fun(self,bone:string, override:table)
-- * `get_bone_override(bone)`: returns `override` in the above format
--     * **Note:** Unlike `get_bone_position`, the returned rotation is in radians, not degrees.
---@field get_bone_override fun(self,bone:string):table
-- * `get_bone_overrides()`: returns all bone overrides as table `{[bonename] = override, ...}`
---@field get_bone_overrides fun(self,):table<string, table>
-- * `set_properties(object property table)`
---@field set_properties fun(self,ObjectProps:ObjectProps)
-- * `get_properties()`: returns a table of all object properties
---@field get_properties fun(self,):ObjectProps
-- * `set_observers(observers)`: sets observers (players this object is sent to)
--     * If `observers` is `nil`, the object's observers are "unmanaged":
--       The object is sent to all players as governed by server settings. This is the default.
--     * `observers` is a "set" of player names: `{name1 = true, name2 = true, ...}`
--         * A set is a table where the keys are the elements of the set
--           (in this case, *valid* player names) and the values are all `true`.
--     * Attachments: The *effective observers* of an object are made up of
--       all players who can observe the object *and* are also effective observers
--       of its parent object (if there is one).
--     * Players are automatically added to their own observer sets.
--       Players **must** effectively observe themselves.
--     * Object activation and deactivation are unaffected by observability.
--     * Attached sounds do not work correctly and thus should not be used
--       on objects with managed observers yet.
---@field set_observers fun(self,observers: table<string, boolean>)
-- * `get_observers()`:
--     * throws an error if the object is invalid
--     * returns `nil` if the observers are unmanaged
--     * returns a table with all observer names as keys and `true` values (a "set") otherwise
---@field get_observers fun(self,): table<string, boolean>?
-- * `get_effective_observers()`:
--     * Like `get_observers()`, but returns the "effective" observers, taking into account attachments
--     * Time complexity: O(nm)
--         * n: number of observers of the involved entities
--         * m: number of ancestors along the attachment chain
---@field get_effective_observers fun(self,): table<string, boolean>
-- * `is_player()`: returns true for players, false otherwise
---@field is_player fun(self,):boolean
-- * `get_nametag_attributes()`
--     * returns a table with the attributes of the nametag of an object
--     * a nametag is a HUD text rendered above the object
--     * ```lua
--       {
--           text = "",
--           color = {a=0..255, r=0..255, g=0..255, b=0..255},
--           bgcolor = {a=0..255, r=0..255, g=0..255, b=0..255},
--       }
--       ```
---@field get_nametag_attributes fun(self,): { text: string, color:ColorSpec, bgcolor:ColorSpec|boolean}
-- * `set_nametag_attributes(attributes)`
--     * sets the attributes of the nametag of an object
--     * `attributes`:
--       ```lua
--       {
--           text = "My Nametag",
--           color = ColorSpec,
--           -- ^ Text color
--           bgcolor = ColorSpec or false,
--           -- ^ Sets background color of nametag
--           -- `false` will cause the background to be set automatically based on user settings
--           -- Default: false
--       }
--       ```
---@field set_nametag_attributes fun(self,attributes:{ text: string?, color:ColorSpec?, bgcolor:ColorSpec|boolean?})
--- Luaentity only
-- * `remove()`: remove object
--     * The object is removed after returning from Lua. However the `ObjectRef`
--       itself instantly becomes unusable with all further method calls having
--       no effect and returning `nil`.
---@field remove fun(self,)
--- Luaentity only
-- * `set_velocity(vel)`
--     * Sets the velocity
--     * `vel` is a vector, e.g. `{x=0.0, y=2.3, z=1.0}`
---@field set_velocity fun(self,vel: vector)
--- Luaentity only
-- * `set_acceleration(acc)`
--     * Sets the acceleration
--     * `acc` is a vector
---@field set_acceleration fun(self,acc:vector)
--- Luaentity only
-- * `get_acceleration()`: returns the acceleration, a vector
---@field get_acceleration fun(self,):vector?
--- Luaentity only
-- * `set_rotation(rot)`
--     * Sets the rotation
--     * `rot` is a vector (radians). X is pitch (elevation), Y is yaw (heading)
--       and Z is roll (bank).
--     * Does not reset rotation incurred through `automatic_rotate`.
--       Remove & re-add your objects to force a certain rotation.
---@field set_rotation fun(self,rot:vector)
--- Luaentity only
-- * `get_rotation()`: returns the rotation, a vector (radians)
---@field get_rotation fun(self,):vector?
--- Luaentity only
-- * `set_yaw(yaw)`: sets the yaw in radians (heading).
---@field set_yaw fun(self,yaw:number)
--- Luaentity only
-- * `get_yaw()`: returns number in radians
---@field get_yaw fun(self,):number
--- Luaentity only
-- * `set_texture_mod(mod)`
--     * Set a texture modifier to the base texture, for sprites and meshes.
--     * When calling `set_texture_mod` again, the previous one is discarded.
--     * `mod` the texture modifier. See [Texture modifiers].
---@field set_texture_mod fun(self,mod:string)
--- Luaentity only
-- * `get_texture_mod()` returns current texture modifier
---@field get_texture_mod fun(self,):string?
--- Luaentity only
-- * `set_sprite(start_frame, num_frames, framelength, select_x_by_camera)`
--     * Specifies and starts a sprite animation
--     * Only used by `sprite` and `upright_sprite` visuals
--     * Animations iterate along the frame `y` position.
--     * `start_frame`: {x=column number, y=row number}, the coordinate of the
--       first frame, default: `{x=0, y=0}`
--     * `num_frames`: Total frames in the texture, default: `1`
--     * `framelength`: Time per animated frame in seconds, default: `0.2`
--     * `select_x_by_camera`: Only for visual = `sprite`. Changes the frame `x`
--       position according to the view direction. default: `false`.
--         * First column:  subject facing the camera
--         * Second column: subject looking to the left
--         * Third column:  subject backing the camera
--         * Fourth column: subject looking to the right
--         * Fifth column:  subject viewed from above
--         * Sixth column:  subject viewed from below
---@field set_sprite fun(self,start_frame: {x:number,y:number}?, num_frames: integer?, framelength:number?, select_x_by_camera: string[]|boolean?)
--- Luaentity only
-- * `get_luaentity()`:
--     * Returns the object's associated luaentity table, if there is one
--     * Otherwise returns `nil` (e.g. for players)
---@field get_luaentity fun(self,):luaentity
--- Luaentity only
-- * `get_entity_name()`:
--     * **Deprecated**: Will be removed in a future version,
--       use `:get_luaentity().name` instead.
---@field get_entity_name fun(self,):string
-- * `get_player_name()`: Returns player name or `""` if is not a player
--- Player only
---@field get_player_name fun(self,):string
-- Player only
-- * `get_player_velocity()`: **DEPRECATED**, use get_velocity() instead.
--   table {x, y, z} representing the player's instantaneous velocity in nodes/s
---@field get_player_velocity fun(self,):vector
-- Player only
-- * `add_player_velocity(vel)`: **DEPRECATED**, use add_velocity(vel) instead.
---@field add_player_velocity fun(self,vel:vector)
-- Player only
-- * `get_look_dir()`: get camera direction as a unit vector
---@field get_look_dir fun(self,):vector
-- Player only
-- * `get_look_vertical()`: pitch in radians
--     * Angle ranges between -pi/2 and pi/2, which are straight up and down
--       respectively.
---@field get_look_vertical fun(self,):number
-- Player only
-- * `get_look_horizontal()`: yaw in radians
--     * Angle is counter-clockwise from the +z direction.
---@field get_look_horizontal fun(self,):number
-- Player only
-- * `set_look_vertical(radians)`: sets look pitch
--     * radians: Angle from looking forward, where positive is downwards.
---@field set_look_vertical fun(self,radians:number)
-- Player only
-- * `set_look_horizontal(radians)`: sets look yaw
--     * radians: Angle from the +z direction, where positive is counter-clockwise.
---@field set_look_horizontal fun(self,radians:number)
-- Player only
-- * `get_look_pitch()`: pitch in radians - Deprecated as broken. Use
--   `get_look_vertical`.
--     * Angle ranges between -pi/2 and pi/2, which are straight down and up
--       respectively.
---@field get_look_pitch fun(self,):number
-- Player only
-- * `get_look_yaw()`: yaw in radians - Deprecated as broken. Use
--   `get_look_horizontal`.
--     * Angle is counter-clockwise from the +x direction.
---@field get_look_yaw fun(self,):number
-- Player only
-- * `set_look_pitch(radians)`: sets look pitch - Deprecated. Use
--   `set_look_vertical`.
---@field set_look_pitch fun(self,radians:number)
-- Player only
-- * `set_look_yaw(radians)`: sets look yaw - Deprecated. Use
--   `set_look_horizontal`.
---@field set_look_yaw fun(self,radians:number)
-- Player only
-- * `get_breath()`: returns player's breath
---@field get_breath fun(self,):number
-- Player only
-- * `set_breath(value)`: sets player's breath
--     * values:
--         * `0`: player is drowning
--         * max: bubbles bar is not shown
--         * See [Object properties] for more information
--     * Is limited to range 0 ... 65535 (2^16 - 1)
---@field set_breath fun(self,value:number)
-- Player only
-- * `set_fov(fov, is_multiplier, transition_time)`: Sets player's FOV
--     * `fov`: Field of View (FOV) value.
--     * `is_multiplier`: Set to `true` if the FOV value is a multiplier.
--       Defaults to `false`.
--     * `transition_time`: If defined, enables smooth FOV transition.
--       Interpreted as the time (in seconds) to reach target FOV.
--       If set to 0, FOV change is instantaneous. Defaults to 0.
--     * Set `fov` to 0 to clear FOV override.
---@field set_fov fun(self,fov:number, is_multiplier:boolean, transition_time:number?)
-- Player only
-- * `get_fov()`: Returns the following:
--     * Server-sent FOV value. Returns 0 if an FOV override doesn't exist.
--     * Boolean indicating whether the FOV value is a multiplier.
--     * Time (in seconds) taken for the FOV transition. Set by `set_fov`.
---@field get_fov fun(self,):number?
-- Player only
-- * `set_attribute(attribute, value)`:  DEPRECATED, use get_meta() instead
--     * Sets an extra attribute with value on player.
--     * `value` must be a string, or a number which will be converted to a
--       string.
--     * If `value` is `nil`, remove attribute from player.
---@field set_attribute fun(self,attribute:string, value:string|number)
-- Player only
-- * `get_attribute(attribute)`:  DEPRECATED, use get_meta() instead
--     * Returns value (a string) for extra attribute.
--     * Returns `nil` if no attribute found.
---@field get_attribute fun(self,attribute:string):string|nil
-- Player only
-- * `get_meta()`: Returns metadata associated with the player (a PlayerMetaRef).
---@field get_meta fun(self,):PlayerMetaRef
-- Player only
-- * `set_inventory_formspec(formspec)`
--     * Redefines the player's inventory formspec.
--     * Should usually be called at least once in the `on_joinplayer` callback.
--     * If `formspec` is `""`, the player's inventory is disabled.
--     * If the inventory formspec is currently open on the client, it is
--       updated immediately.
--     * See also: `core.register_on_player_receive_fields`
---@field set_inventory_formspec fun(self,formspec:string)
-- Player only
-- * `get_inventory_formspec()`: returns a formspec string
---@field get_inventory_formspec fun(self,):string?
-- Player only
-- * `set_formspec_prepend(formspec)`:
--     * the formspec string will be added to every formspec shown to the user,
--       except for those with a no_prepend[] tag.
--     * This should be used to set style elements such as background[] and
--       bgcolor[], any non-style elements (eg: label) may result in weird behavior.
--     * Only affects formspecs shown after this is called.
---@field set_formspec_prepend fun(self,formspec:string)
-- Player only
-- * `get_formspec_prepend()`: returns a formspec string.
---@field get_formspec_prepend fun(self,):string?
-- Player only
-- * `get_player_control()`: returns table with player input
--     * The table contains the following boolean fields representing the pressed
--       keys: `up`, `down`, `left`, `right`, `jump`, `aux1`, `sneak`, `dig`,
--       `place`, `LMB`, `RMB` and `zoom`.
--     * The fields `LMB` and `RMB` are equal to `dig` and `place` respectively,
--       and exist only to preserve backwards compatibility.
--     * The table also contains the fields `movement_x` and `movement_y`.
--         * They represent the movement of the player. Values are numbers in the
--           range [-1.0,+1.0].
--         * They take both keyboard and joystick input into account.
--         * You should prefer them over `up`, `down`, `left` and `right` to
--           support different input methods correctly.
--     * Returns an empty table `{}` if the object is not a player.
---@field get_player_control fun(self,):{up:boolean, down:boolean, left:boolean, right:boolean, jump:boolean, aux1:boolean, sneak:boolean, dig:boolean, place:boolean, zoom:boolean, movement_x:number, movement_y:number}
-- Player only
-- * `get_player_control_bits()`: returns integer with bit packed player pressed
--   keys.
--     * Bits:
--         * 0 - up
--         * 1 - down
--         * 2 - left
--         * 3 - right
--         * 4 - jump
--         * 5 - aux1
--         * 6 - sneak
--         * 7 - dig
--         * 8 - place
--         * 9 - zoom
--     * Returns `0` (no bits set) if the object is not a player.
---@field get_player_control_bits fun(self,):number
-- Player only
-- * `set_physics_override(override_table)`
--     * Overrides the physics attributes of the player
--     * `override_table` is a table with the following fields:
--         * `speed`: multiplier to *all* movement speed (`speed_*`) and
--                    acceleration (`acceleration_*`) values (default: `1`)
--         * `speed_walk`: multiplier to default walk speed value (default: `1`)
--             * Note: The actual walk speed is the product of `speed` and `speed_walk`
--         * `speed_climb`: multiplier to default climb speed value (default: `1`)
--             * Note: The actual climb speed is the product of `speed` and `speed_climb`
--         * `speed_crouch`: multiplier to default sneak speed value (default: `1`)
--             * Note: The actual sneak speed is the product of `speed` and `speed_crouch`
--         * `speed_fast`: multiplier to default speed value in Fast Mode (default: `1`)
--             * Note: The actual fast speed is the product of `speed` and `speed_fast`
--         * `jump`: multiplier to default jump value (default: `1`)
--         * `gravity`: multiplier to default gravity value (default: `1`)
--         * `liquid_fluidity`: multiplier to liquid movement resistance value
--           (for nodes with `liquid_move_physics`); the higher this value, the lower the
--           resistance to movement. At `math.huge`, the resistance is zero and you can
--           move through any liquid like air. (default: `1`)
--             * Warning: Values below 1 are currently unsupported.
--         * `liquid_fluidity_smooth`: multiplier to default maximum liquid resistance value
--           (for nodes with `liquid_move_physics`); controls deceleration when entering
--           node at high speed. At higher values you come to a halt more quickly
--           (default: `1`)
--         * `liquid_sink`: multiplier to default liquid sinking speed value;
--           (for nodes with `liquid_move_physics`) (default: `1`)
--         * `acceleration_default`: multiplier to horizontal and vertical acceleration
--           on ground or when climbing (default: `1`)
--             * Note: The actual acceleration is the product of `speed` and `acceleration_default`
--         * `acceleration_air`: multiplier to acceleration
--           when jumping or falling (default: `1`)
--             * Note: The actual acceleration is the product of `speed` and `acceleration_air`
--         * `acceleration_fast`: multiplier to acceleration in Fast Mode (default: `1`)
--             * Note: The actual acceleration is the product of `speed` and `acceleration_fast`
--         * `sneak`: whether player can sneak (default: `true`)
--         * `sneak_glitch`: whether player can use the new move code replications
--           of the old sneak side-effects: sneak ladders and 2 node sneak jump
--           (default: `false`)
--         * `new_move`: use new move/sneak code. When `false` the exact old code
--           is used for the specific old sneak behavior (default: `true`)
--     * Note: All numeric fields above modify a corresponding `movement_*` setting.
--     * For games, we recommend for simpler code to first modify the `movement_*`
--       settings (e.g. via the game's `minetest.conf`) to set a global base value
--       for all players and only use `set_physics_override` when you need to change
--       from the base value on a per-player basis
--     * Note: Some of the fields don't exist in old API versions, see feature
--       `physics_overrides_v2`.
--
---@field set_physics_override fun(self,override_table:table)
-- Player only
-- * `get_physics_override()`: returns the table given to `set_physics_override`
---@field get_physics_override fun(self,):table
-- Player only
-- * `hud_add(hud definition)`: add a HUD element described by HUD def, returns ID
--    number on success
---@field hud_add fun(self,hud:HudDef):HudID?
-- Player only
-- * `hud_remove(id)`: remove the HUD element of the specified id
---@field hud_remove fun(self,id:HudID)
-- Player only
-- * `hud_change(id, stat, value)`: change a value of a previously added HUD
--   element.
--     * `stat` supports the same keys as in the hud definition table except for
--       `"type"` (or the deprecated `"hud_elem_type"`).
---@field hud_change fun(self,id:HudID, stat:string, value:any)
-- Player only
-- * `hud_get(id)`: gets the HUD element definition structure of the specified ID
---@field hud_get fun(self,id:HudID)
-- Player only
-- * `hud_get_all()`:
--     * Returns a table in the form `{ [id] = HUD definition, [id] = ... }`.
--     * A mod should keep track of its introduced IDs and only use this to access foreign elements.
--     * It is discouraged to change foreign HUD elements.
---@field hud_get_all fun(self,):table<HudID, HudDef>
-- Player only
-- * `hud_set_flags(flags)`: sets specified HUD flags of player.
--     * `flags`: A table with the following fields set to boolean values
--         * `hotbar`
--         * `healthbar`
--         * `crosshair`
--         * `wielditem`
--         * `breathbar`
--         * `minimap`: Modifies the client's permission to view the minimap.
--           The client may locally elect to not view the minimap.
--         * `minimap_radar`: is only usable when `minimap` is true
--         * `basic_debug`: Allow showing basic debug info that might give a gameplay advantage.
--           This includes map seed, player position, look direction, the pointed node and block bounds.
--           Does not affect players with the `debug` privilege.
--         * `chat`: Modifies the client's permission to view chat on the HUD.
--           The client may locally elect to not view chat. Does not affect the console.
--     * If a flag equals `nil`, the flag is not modified
---@field hud_set_flags fun(self,flags: { hotbar: boolean?, healthbar: boolean?, crosshair:boolean?, wielditem: boolean?, breathbar: boolean?, minimap: boolean?, minimap_radar: boolean?, basic_debug: boolean?})
-- Player only
-- * `hud_get_flags()`: returns a table of player HUD flags with boolean values.
--     * See `hud_set_flags` for a list of flags that can be toggled.
---@field hud_get_flags fun(self,):{ hotbar: boolean?, healthbar: boolean?, crosshair:boolean?, wielditem: boolean?, breathbar: boolean?, minimap: boolean?, minimap_radar: boolean?, basic_debug: boolean?}
-- Player only
-- * `hud_set_hotbar_itemcount(count)`: sets number of items in builtin hotbar
--     * `count`: number of items, must be between `1` and `32`
--     * If `count` exceeds the `"main"` list size, the list size will be used instead.
---@field hud_set_hotbar_itemcount fun(self,count: integer)
-- Player only
-- * `hud_get_hotbar_itemcount()`: returns number of visible items
--     * This value is also clamped by the `"main"` list size.
---@field hud_get_hotbar_itemcount fun(self,):integer
-- Player only
-- * `hud_set_hotbar_image(texturename)`
--     * sets background image for hotbar
---@field hud_set_hotbar_image fun(self,texturename:string)
-- Player only
-- * `hud_get_hotbar_image()`: returns texturename
---@field hud_get_hotbar_image fun(self,):string
-- Player only
-- * `hud_set_hotbar_selected_image(texturename)`
--     * sets image for selected item of hotbar
---@field hud_set_hotbar_selected_image fun(self,texturename:string)
-- Player only
-- * `hud_get_hotbar_selected_image()`: returns texturename
---@field hud_get_hotbar_selected_image fun(self,):string
-- Player only
-- * `set_minimap_modes({mode, mode, ...}, selected_mode)`
--     * Overrides the available minimap modes (and toggle order), and changes the
--     selected mode.
--     * `mode` is a table consisting of up to four fields:
--         * `type`: Available type:
--             * `off`: Minimap off
--             * `surface`: Minimap in surface mode
--             * `radar`: Minimap in radar mode
--             * `texture`: Texture to be displayed instead of terrain map
--               (texture is centered around 0,0 and can be scaled).
--               Texture size is limited to 512 x 512 pixel.
--         * `label`: Optional label to display on minimap mode toggle
--           The translation must be handled within the mod.
--         * `size`: Sidelength or diameter, in number of nodes, of the terrain
--           displayed in minimap
--         * `texture`: Only for texture type, name of the texture to display
--         * `scale`: Only for texture type, scale of the texture map in nodes per
--           pixel (for example a `scale` of 2 means each pixel represents a 2x2
--           nodes square)
--     * `selected_mode` is the mode index to be selected after modes have been changed
--     (0 is the first mode).
---@field set_minimap_modes fun(self,modes: ({ type: "off"|"surface"|"radar"|"texture", label: string?, size: integer, texture: string?, scale: integer?})[], selected_mode: integer )
-- Player only
-- * `set_sky(sky_parameters)`
--     * The presence of the function `set_sun`, `set_moon` or `set_stars` indicates
--       whether `set_sky` accepts this format. Check the legacy format otherwise.
--     * Passing no arguments resets the sky to its default values.
--     * `sky_parameters` is a table with the following optional fields:
--         * `base_color`: ColorSpec, meaning depends on `type` (default: `#ffffff`)
--         * `body_orbit_tilt`: Float, rotation angle of sun/moon orbit in degrees.
--            By default, orbit is controlled by a client-side setting, and this field is not set.
--            After a value is assigned, it can only be changed to another float value.
--            Valid range [-60.0,60.0] (default: not set)
--         * `type`: Available types:
--             * `"regular"`: Uses 0 textures, `base_color` ignored
--             * `"skybox"`: Uses 6 textures, `base_color` used as fog.
--             * `"plain"`: Uses 0 textures, `base_color` used as both fog and sky.
--             (default: `"regular"`)
--         * `textures`: A table containing up to six textures in the following
--             order: Y+ (top), Y- (bottom), X+ (east), X- (west), Z- (south), Z+ (north).
--             The top and bottom textures are oriented in-line with the east (X+) face (the top edge of the
--             bottom texture and the bottom edge of the top texture touch the east face).
--             Some top and bottom textures expect to be aligned with the north face and will need to be rotated
--             by -90 and 90 degrees, respectively, to fit the eastward orientation.
--         * `clouds`: Boolean for whether clouds appear. (default: `true`)
--         * `sky_color`: A table used in `"regular"` type only, containing the
--           following values (alpha is ignored):
--             * `day_sky`: ColorSpec, for the top half of the sky during the day.
--               (default: `#61b5f5`)
--             * `day_horizon`: ColorSpec, for the bottom half of the sky during the day.
--               (default: `#90d3f6`)
--             * `dawn_sky`: ColorSpec, for the top half of the sky during dawn/sunset.
--               (default: `#b4bafa`)
--               The resulting sky color will be a darkened version of the ColorSpec.
--               Warning: The darkening of the ColorSpec is subject to change.
--             * `dawn_horizon`: ColorSpec, for the bottom half of the sky during dawn/sunset.
--               (default: `#bac1f0`)
--               The resulting sky color will be a darkened version of the ColorSpec.
--               Warning: The darkening of the ColorSpec is subject to change.
--             * `night_sky`: ColorSpec, for the top half of the sky during the night.
--               (default: `#006bff`)
--               The resulting sky color will be a dark version of the ColorSpec.
--               Warning: The darkening of the ColorSpec is subject to change.
--             * `night_horizon`: ColorSpec, for the bottom half of the sky during the night.
--               (default: `#4090ff`)
--               The resulting sky color will be a dark version of the ColorSpec.
--               Warning: The darkening of the ColorSpec is subject to change.
--             * `indoors`: ColorSpec, for when you're either indoors or underground.
--               (default: `#646464`)
--             * `fog_sun_tint`: ColorSpec, changes the fog tinting for the sun
--               at sunrise and sunset. (default: `#f47d1d`)
--             * `fog_moon_tint`: ColorSpec, changes the fog tinting for the moon
--               at sunrise and sunset. (default: `#7f99cc`)
--             * `fog_tint_type`: string, changes which mode the directional fog
--                 abides by, `"custom"` uses `sun_tint` and `moon_tint`, while
--                 `"default"` uses the classic Luanti sun and moon tinting.
--                 Will use tonemaps, if set to `"default"`. (default: `"default"`)
--         * `fog`: A table with following optional fields:
--             * `fog_distance`: integer, set an upper bound for the client's viewing_range.
--                Any value >= 0 sets the desired upper bound for viewing_range,
--                disables range_all and prevents disabling fog (F3 key by default).
--                Any value < 0 resets the behavior to being client-controlled.
--                (default: -1)
--             * `fog_start`: float, override the client's fog_start.
--                Fraction of the visible distance at which fog starts to be rendered.
--                Any value between [0.0, 0.99] set the fog_start as a fraction of the viewing_range.
--                Any value < 0, resets the behavior to being client-controlled.
--                (default: -1)
--             * `fog_color`: ColorSpec, override the color of the fog.
--                Unlike `base_color` above this will apply regardless of the skybox type.
--                (default: `"#00000000"`, which means no override)
---@field set_sky fun(self,sky_parameters:table)
-- Player only
-- * `get_sky(as_table)`:
--     * `as_table`: boolean that determines whether the deprecated version of this
--     function is being used.
--         * `true` returns a table containing sky parameters as defined in `set_sky(sky_parameters)`.
--         * Deprecated: `false` or `nil` returns base_color, type, table of textures,
--         clouds.
---@field get_sky fun(self,as_table: boolean): table
-- Player only
-- * `set_sun(sun_parameters)`:
--     * Passing no arguments resets the sun to its default values.
--     * `sun_parameters` is a table with the following optional fields:
--         * `visible`: Boolean for whether the sun is visible.
--             (default: `true`)
--         * `texture`: A regular texture for the sun. Setting to `""`
--             will re-enable the mesh sun. (default: "sun.png", if it exists)
--             The texture appears non-rotated at sunrise and rotated 180 degrees
--             (upside down) at sunset.
--         * `tonemap`: A 512x1 texture containing the tonemap for the sun
--             (default: `"sun_tonemap.png"`)
--         * `sunrise`: A regular texture for the sunrise texture.
--             (default: `"sunrisebg.png"`)
--         * `sunrise_visible`: Boolean for whether the sunrise texture is visible.
--             (default: `true`)
--         * `scale`: Float controlling the overall size of the sun. (default: `1`)
--             Note: For legacy reasons, the sun is bigger than the moon by a factor
--             of about `1.57` for equal `scale` values.
---@field set_sun fun(self,sun_parameters: table)
-- Player only
-- * `get_sun()`: returns a table with the current sun parameters as in
--     `set_sun`.
---@field get_sun fun(self,):table
-- Player only
-- * `set_moon(moon_parameters)`:
--     * Passing no arguments resets the moon to its default values.
--     * `moon_parameters` is a table with the following optional fields:
--         * `visible`: Boolean for whether the moon is visible.
--             (default: `true`)
--         * `texture`: A regular texture for the moon. Setting to `""`
--             will re-enable the mesh moon. (default: `"moon.png"`, if it exists)
--             The texture appears non-rotated at sunrise / moonset and rotated 180
--             degrees (upside down) at sunset / moonrise.
--             Note: Relative to the sun, the moon texture is hence rotated by 180°.
--             You can use the `^[transformR180` texture modifier to achieve the same orientation.
--         * `tonemap`: A 512x1 texture containing the tonemap for the moon
--             (default: `"moon_tonemap.png"`)
--         * `scale`: Float controlling the overall size of the moon (default: `1`)
--             Note: For legacy reasons, the sun is bigger than the moon by a factor
--             of about `1.57` for equal `scale` values.
---@field set_moon fun(self,moon_parameters: table)
-- Player only
-- * `get_moon()`: returns a table with the current moon parameters as in
--     `set_moon`.
---@field get_moon fun(self,):table
-- Player only
-- * `set_stars(star_parameters)`:
--     * Passing no arguments resets stars to their default values.
--     * `star_parameters` is a table with the following optional fields:
--         * `visible`: Boolean for whether the stars are visible.
--             (default: `true`)
--         * `day_opacity`: Float for maximum opacity of stars at day.
--             No effect if `visible` is false.
--             (default: 0.0; maximum: 1.0; minimum: 0.0)
--         * `count`: Integer number to set the number of stars in
--             the skybox. Only applies to `"skybox"` and `"regular"` sky types.
--             (default: `1000`)
--         * `star_color`: ColorSpec, sets the colors of the stars,
--             alpha channel is used to set overall star brightness.
--             (default: `#ebebff69`)
--         * `scale`: Float controlling the overall size of the stars (default: `1`)
---@field set_stars fun(self,star_parameters:table)
-- Player only
-- * `get_stars()`: returns a table with the current stars parameters as in
--     `set_stars`.
---@field get_stars fun(self,):table
-- Player only
-- * `set_clouds(cloud_parameters)`: set cloud parameters
--     * Passing no arguments resets clouds to their default values.
--     * `cloud_parameters` is a table with the following optional fields:
--         * `density`: from `0` (no clouds) to `1` (full clouds) (default `0.4`)
--         * `color`: basic cloud color with alpha channel, ColorSpec
--           (default `#fff0f0e5`).
--         * `ambient`: cloud color lower bound, use for a "glow at night" effect.
--           ColorSpec (alpha ignored, default `#000000`)
--         * `height`: cloud height, i.e. y of cloud base (default per conf,
--           usually `120`)
--         * `thickness`: cloud thickness in nodes (default `16`).
--           if set to zero the clouds are rendered flat.
--         * `speed`: 2D cloud speed + direction in nodes per second
--           (default `{x=0, z=-2}`).
--         * `shadow`: shadow color, applied to the base of the cloud
--           (default `#cccccc`).
---@field set_clouds fun(self,cloud_parameters:table)
-- Player only
-- * `get_clouds()`: returns a table with the current cloud parameters as in
--   `set_clouds`.
---@field get_clouds fun(self,):table
-- Player only
-- * `override_day_night_ratio(ratio or nil)`
--     * `0`...`1`: Overrides day-night ratio, controlling sunlight to a specific
--       amount.
--     * Passing no arguments disables override, defaulting to sunlight based on day-night cycle
--     * See also `core.time_to_day_night_ratio`,
---@field override_day_night_ratio fun(self,number)
-- Player only
-- * `get_day_night_ratio()`: returns the ratio or nil if it isn't overridden
---@field get_day_night_ratio fun(self,):number
-- Player only
-- * `set_local_animation(idle, walk, dig, walk_while_dig, frame_speed)`:
--   set animation for player model in third person view.
--     * Every animation equals to a `{x=starting frame, y=ending frame}` table.
--     * `frame_speed` sets the animations frame speed. Default is 30.
-- Unofficial note: Sorry, no types for this one
---@field set_local_animation fun(self,idle, walk, dig, walk_while_dig, frame_speed)
-- Player only
-- * `get_local_animation()`: returns idle, walk, dig, walk_while_dig tables and
--   `frame_speed`.
-- Unofficial note: Sorry, no types for this one
---@field get_local_animation fun(self,):table?, table?, table?, table?,table?
-- Player only
-- * `set_eye_offset([firstperson, thirdperson_back, thirdperson_front])`: Sets camera offset vectors.
--     * `firstperson`: Offset in first person view.
--       Defaults to `vector.zero()` if unspecified.
--     * `thirdperson_back`: Offset in third person back view.
--       Clamped between `vector.new(-10, -10, -5)` and `vector.new(10, 15, 5)`.
--       Defaults to `vector.zero()` if unspecified.
--     * `thirdperson_front`: Offset in third person front view.
--       Same limits as for `thirdperson_back` apply.
--       Defaults to `thirdperson_back` if unspecified.
---@field set_eye_offset fun(self,firstperson: vector?, thirdperson_back:vector?, thirdperson_front:vector? )
-- Player only
-- * `get_eye_offset()`: Returns camera offset vectors as set via `set_eye_offset`.
---@field get_eye_offset fun(self,): vector?, vector?, vector
-- Player only
-- * `set_camera(params)`: Sets camera parameters.
--     * `mode`: Defines the camera mode used
--       - `any`: free choice between all modes (default)
--       - `first`: first-person camera
--       - `third`: third-person camera
--       - `third_front`: third-person camera, looking opposite of movement direction
--     * Supported by client since 5.12.0.
---@field set_camera fun(self,params: { mode: "any"|"first"|"third"|"third_front"})
-- Player only
-- * `get_camera()`: Returns the camera parameters as a table as above.
---@field get_camera fun(self,):{ mode: "any"|"first"|"third"|"third_front"}
-- Player only
-- * `send_mapblock(blockpos)`:
--     * Sends an already loaded mapblock to the player.
--     * Returns `false` if nothing was sent (note that this can also mean that
--       the client already has the block)
--     * Resource intensive - use sparsely
---@field send_mapblock fun(self,blockpos:vector):boolean?
-- Player only
-- * `set_lighting(light_definition)`: sets lighting for the player
--     * Passing no arguments resets lighting to its default values.
--     * `light_definition` is a table with the following optional fields:
--       * `saturation` sets the saturation (vividness; default: `1.0`).
--         * It is applied according to the function `result = b*(1-s) + c*s`, where:
--           * `c` is the original color
--           * `b` is the greyscale version of the color with the same luma
--           * `s` is the saturation set here
--         * The resulting color always has the same luma (perceived brightness) as the original.
--         * This means that:
--           * values > 1 oversaturate
--           * values < 1 down to 0 desaturate, 0 being entirely greyscale
--           * values < 0 cause an effect similar to inversion,
--             but keeping original luma and being symmetrical in terms of saturation
--             (eg. -1 and 1 is the same saturation and luma, but different hues)
--         * This value has no effect on clients who have shaders or post-processing disabled.
--       * `shadows` is a table that controls ambient shadows
--         * This has no effect on clients who have the "Dynamic Shadows" effect disabled.
--         * `intensity` sets the intensity of the shadows from 0 (no shadows, default) to 1 (blackness)
--         * `tint` tints the shadows with the provided color, with RGB values ranging from 0 to 255.
--           (default `{r=0, g=0, b=0}`)
--       * `exposure` is a table that controls automatic exposure.
--         The basic exposure factor equation is `e = 2^exposure_correction / clamp(luminance, 2^luminance_min, 2^luminance_max)`
--         * This has no effect on clients who have the "Automatic Exposure" effect disabled.
--         * `luminance_min` set the lower luminance boundary to use in the calculation (default: `-3.0`)
--         * `luminance_max` set the upper luminance boundary to use in the calculation (default: `-3.0`)
--         * `exposure_correction` correct observed exposure by the given EV value (default: `0.0`)
--         * `speed_dark_bright` set the speed of adapting to bright light (default: `1000.0`)
--         * `speed_bright_dark` set the speed of adapting to dark scene (default: `1000.0`)
--         * `center_weight_power` set the power factor for center-weighted luminance measurement (default: `1.0`)
--       * `bloom` is a table that controls bloom.
--         * This has no effect on clients with protocol version < 46 or clients who
--           have the "Bloom" effect disabled.
--         * `intensity` defines much bloom is applied to the rendered image.
--           * Recommended range: from 0.0 to 1.0, default: 0.05
--           * If set to 0, bloom is disabled.
--           * The default value is to be changed from 0.05 to 0 in the future.
--             If you wish to keep the current default value, you should set it
--             explicitly.
--         * `strength_factor` defines the magnitude of bloom overexposure.
--           * Recommended range: from 0.1 to 10.0, default: 1.0
--         * `radius` is a logical value that controls how far the bloom effect
--           spreads from the bright objects.
--           * Recommended range: from 0.1 to 8.0, default: 1.0
--         * The behavior of values outside the recommended range is unspecified.
--       * `volumetric_light`: is a table that controls volumetric light (a.k.a. "godrays")
--         * This has no effect on clients who have the "Volumetric Lighting" or "Bloom" effects disabled.
--         * `strength`: sets the strength of the volumetric light effect from 0 (off, default) to 1 (strongest).
--             * `0.2` is a reasonable standard value.
--             * Currently, bloom `intensity` and `strength_factor` affect volumetric
--               lighting `strength` and vice versa. This behavior is to be changed
--               in the future, do not rely on it.
--
---@field set_lighting fun(self,light_definition: table)
-- Player only
-- * `get_lighting()`: returns the current state of lighting for the player.
--     * Result is a table with the same fields as `light_definition` in `set_lighting`.
---@field get_lighting fun(self,):table?
-- Player only
-- * `respawn()`: Respawns the player using the same mechanism as the death screen,
--   including calling `on_respawnplayer` callbacks.
---@field respawn fun(self,)
-- Player only
-- * `get_flags()`: returns a table of player flags (the following boolean fields):
--   * `breathing`: Whether breathing (regaining air) is enabled, default `true`.
--   * `drowning`: Whether drowning (losing air) is enabled, default `true`.
--   * `node_damage`: Whether the player takes damage from nodes, default `true`.
---@field get_flags fun(self,):{breathing:boolean, drowning:boolean, node_damage:boolean}
-- Player only
-- * `set_flags(flags)`: sets flags
--   * takes a table in the same format as returned by `get_flags`
--   * absent fields are left unchanged
---@field set_flags fun(self,flags: {breathing:boolean?, drowning:boolean?, node_damage:boolean?})

---@class PlayerRef: ObjectRef
---@class LuaEntityRef: ObjectRef

---@class PlayerMetaRef: MetaDataRef

---@class EntityDef
---@field on_activate? fun(self, staticdata:string, dtime_s:number)
-- * `on_deactivate(self, removal)`
--     * Called when the object is about to get removed or unloaded.
--     * `removal`: boolean indicating whether the object is about to get removed.
--       Calling `object:remove()` on an active object will call this with `removal=true`.
--       The mapblock the entity resides in being unloaded will call this with `removal=false`.
--     * Note that this won't be called if the object hasn't been activated in the first place.
--       In particular, `core.clear_objects({mode = "full"})` won't call this,
--       whereas `core.clear_objects({mode = "quick"})` might call this.
---@field on_deactivate? fun(self, removal:boolean)
---@field on_step? fun(self, dtime: number, moveresult: moveresult)
-- Called when somebody punches the object.
-- Note that you probably want to handle most punches using the automatic armor group system.
-- puncher: an ObjectRef (can be nil)
-- time_from_last_punch: Meant for disallowing spamming of clicks (can be nil).
-- tool_capabilities: capability table of used item (can be nil)
-- dir: unit vector of direction of punch. Always defined. Points from the puncher to the punched.
-- damage: damage that will be done to entity.
-- Can return true to prevent the default damage mechanism.
---@field on_punch? fun(self, puncher:ObjectRef?, time_from_last_punch:number?, tool_capabilities:tool_capabilities?, dir: vector, damage: number):boolean?
---@field on_death? fun(self, killer:ObjectRef?)?
---@field on_rightclick? fun(self, clicker:ObjectRef)
---@field on_attach_child? fun(self, child:ObjectRef)
---@field on_detach_child? fun(self, child:ObjectRef)
---@field on_detach? fun(self, parent:ObjectRef)
---@field get_staticdata? fun(self)
---@field initial_properties ObjectProps
